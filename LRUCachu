class TreeNode:
    def __init__(self, key):
        self.key = key
        self.prev = None
        self.next = None

class LRUCache:

    def __init__(self, capacity: int):
        self.l = TreeNode(0)
        self.r = TreeNode(0)
        self.l.next = self.r
        self.r.prev = self.l
        self.cache = {}        
        self.nodes = {}
        self.capacity = capacity

    def dele(self, node):
        prev, nxt = node.prev, node.next
        prev.next = nxt
        nxt.prev = prev

    def add(self, node):
        prev, nxt = self.r.prev, self.r
        prev.next = node
        node.prev = prev
        node.next = nxt
        nxt.prev = node

    def get(self, key: int) -> int:
        if key in self.cache:
            node = self.nodes[key]
            self.dele(node)
            self.add(node)
            return self.cache[key]
        return -1

    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            self.cache[key] = value
            node = self.nodes[key]
            self.dele(node)
            self.add(node)
        else:
            node = TreeNode(key)
            self.cache[key] = value
            self.nodes[key] = node
            self.add(node)

            if len(self.cache) > self.capacity:
                lru = self.l.next
                self.dele(lru)
                del self.cache[lru.key]
                del self.nodes[lru.key]


lru = LRUCache(2)
lru.put(1, 10)
lru.put(2, 20)
print(lru.get(1))  # ✅ 10
lru.put(3, 30)     # evicts key 2
print(lru.get(2))  # ✅ -1
lru.put(4, 40)     # evicts key 1
print(lru.get(1))  # ✅ -1
print(lru.get(3))  # ✅ 30
print(lru.get(4))  # ✅ 40
