class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        queue = deque()
        fresh = 0
        directions = [(1,0), (-1,0), (0,1), (0,-1)]

        # Step 1: Enqueue all rotten oranges and count fresh ones
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 2:
                    queue.append((i, j))
                elif grid[i][j] == 1:
                    fresh += 1

        time=0
        visit=set()
        while queue and fresh>0:
            for _ in range(len(queue)):
                r,c=queue.popleft()
                for dx,dy in directions:
                    if 0<=dx+r<m and 0<=dy+c<n and (dx+r,dy+c) not in visit and grid[dx+r][dy+c]==1:
                        visit.add((dx+r,dy+c))
                        queue.append((dx+r,dy+c))
                        fresh-=1
            time+=1
        print(fresh)
        return time if fresh == 0 else -1
grid = [[1,1,0],[0,1,1],[0,1,2]]
print(Solution().orangesRotting(grid))
