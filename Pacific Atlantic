class Solution:
    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:
        def dfs(i, j, visited):
            if i<0 or j<0 or i>m or j>n:
                return 
            visited.add((i, j))
            for dx, dy in directions:
                ni, nj = i + dx, j + dy
                if 0 <= ni < m and 0 <= nj < n and (ni, nj) not in visited and heights[ni][nj] >= heights[i][j]:
                    dfs(ni, nj, visited)

        m, n = len(heights), len(heights[0])
        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
        pacific_reachable = set()
        atlantic_reachable = set()
        pacific = [(ele, 0) for ele in range(m)] + [(0, ele) for ele in range(n)]
        atlantic = [(ele, n - 1) for ele in range(m)] + [(m - 1, ele) for ele in range(n)]

        for i, j in pacific:
            dfs(i, j, pacific_reachable)
        for i, j in atlantic:
            dfs(i, j, atlantic_reachable)

        return list(pacific_reachable & atlantic_reachable)

heights = [
  [4,2,7,3,4],
  [7,4,6,4,7],
  [6,3,5,3,6]
]
print(Solution().pacificAtlantic(heights))
