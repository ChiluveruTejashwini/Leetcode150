class MaxStack:

    def __init__(self):
        self.stack = []       # normal stack
        self.max_stack = []   # keeps track of max values

    def push(self, x: int) -> None:
        self.stack.append(x)
        if not self.max_stack or x >= self.max_stack[-1]:
            self.max_stack.append(x)

    def pop(self) -> int:
        if not self.stack:
            return None
        val = self.stack.pop()
        if val == self.max_stack[-1]:
            self.max_stack.pop()
        return val

    def top(self) -> int:
        return self.stack[-1] if self.stack else None

    def peekMax(self) -> int:
        return self.max_stack[-1] if self.max_stack else None

    def popMax(self) -> int:
        max_val = self.peekMax()
        buffer = []

        # pop until we reach the max
        while self.top() != max_val:
            buffer.append(self.pop())

        # remove the max
        self.pop()

        # push back the buffer
        while buffer:
            self.push(buffer.pop())

        return max_val

