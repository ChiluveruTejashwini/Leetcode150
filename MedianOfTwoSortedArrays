class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        A, B = nums1, nums2
        if len(A) > len(B):  # ensure A is the smaller array
            A, B = B, A
        
        total = len(A) + len(B)
        half = total // 2
        
        l, r = 0, len(A) - 1
        while True:
            i = (l + r) // 2   # index in A
            j = half - i - 2   # index in B

            Aleft = A[i] if i >= 0 else -float("inf")
            Aright = A[i+1] if i+1 < len(A) else float("inf")
            Bleft = B[j] if j >= 0 else -float("inf")
            Bright = B[j+1] if j+1 < len(B) else float("inf")

            # correct partition
            if Aleft <= Bright and Bleft <= Aright:
                if total % 2:  # odd
                    return min(Aright, Bright)
                return (max(Aleft, Bleft) + min(Aright, Bright)) / 2
            elif Aleft > Bright:
                r = i - 1
            else:
                l = i + 1
            
print(Solution().findMedianSortedArrays([1,3,4,7,9], [2,3,5]))       # 2.0
print(Solution().findMedianSortedArrays([1,2], [3,4]))     # 2.5
print(Solution().findMedianSortedArrays([0,0], [0,0]))     # 0.0
print(Solution().findMedianSortedArrays([], [1]))

            
        
