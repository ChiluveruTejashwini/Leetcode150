"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""

class Solution:
    def cloneGraph(self, node: Optional['Node']) -> Optional['Node']:
        if not node:
            return None
        di={}
        queue=deque([node])
        while queue:
            no=queue.popleft()
            di[no]=Node(no.val)
            for neigh in no.neighbors:
                if neigh not in di:
                    queue.append(neigh)
        for k,v in di.items():
            di[k].neighbors=[di[neigh] for neigh in k.neighbors]
        return di[node]
#adjList = [[2],[1,3],[2]]
n1 = Node(1)
n2 = Node(2)
n3 = Node(3)

n1.neighbors = [n2]
n2.neighbors = [n1, n3]
n3.neighbors = [n2]

print(Solution().cloneGraph(n1))
