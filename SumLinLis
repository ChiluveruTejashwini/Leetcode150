# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        dummy=ListNode()
        cur=dummy
        carry=0
        while l1 or l2 or carry:
            val1 = l1.val if l1 else 0
            val2 = l2.val if l2 else 0
            su=val1+val2+carry
            print("su bef",su)
            carry=su//10
            su=su%10
            print("su af",su)
            cur.next=ListNode(su)
            cur=cur.next
            l1 = l1.next if l1 else None
            l2 = l2.next if l2 else None
        return dummy.next

def build_linked_list(nums):
    dummy = ListNode()
    cur = dummy
    for n in nums:
        cur.next = ListNode(n)
        cur = cur.next
    return dummy.next

# Helper to convert linked list back to Python list
def linked_list_to_list(node):
    res = []
    while node:
        res.append(node.val)
        node = node.next
    return res

# --- Testing ---
l1 = build_linked_list([2,4,3])   # number 342
l2 = build_linked_list([5,6,4])   # number 465

sol = Solution()
result = sol.addTwoNumbers(l1, l2)

print(linked_list_to_list(result))
