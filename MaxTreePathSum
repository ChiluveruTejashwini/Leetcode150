# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def maxPathSum(self, root: Optional[TreeNode]) -> int:
        self.ans = -float("inf")
        
        def du(root):
            if not root:
                return 0
            rl=max(0,du(root.left))
            rr=max(0,du(root.right))
            self.ans=max(self.ans,rl+root.val+rr)
            return root.val+max(rl,rr)
        du(root)
        return self.ans
            
root1 = TreeNode(1)
root1.left = TreeNode(2)
root1.right = TreeNode(3)

print(Solution().maxPathSum(root1))  # Expected 6 (2 + 1 + 3)
root2 = TreeNode(-10)
root2.left = TreeNode(9)
root2.right = TreeNode(20)
root2.right.left = TreeNode(15)
root2.right.right = TreeNode(7)

print(Solution().maxPathSum(root2))  # Expected 42 (15 + 20 + 7)


# Example 3: Single node [-3]
root3 = TreeNode(-3)
print(Solution().maxPathSum(root3))
