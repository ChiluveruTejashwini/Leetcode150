class Solution:
    def swimInWater(self, grid: List[List[int]]) -> int:
        n = len(grid)
        dirs = [(1,0),(0,1),(-1,0),(0,-1)]
        
        # (time, row, col)
        minheap = [(grid[0][0], 0, 0)]
        visited = set([(0,0)])
        
        while minheap:
            t, r, c = heapq.heappop(minheap)
            
            # If we reached the target cell
            if r == n-1 and c == n-1:
                return t
            
            for dr, dc in dirs:
                nr, nc = r + dr, c + dc
                if 0 <= nr < n and 0 <= nc < n and (nr, nc) not in visited:
                    visited.add((nr,nc))

                    heapq.heappush(minheap, (max(t, grid[nr][nc]), nr, nc))
        
        return -1 
            
li=[
  [0,1,2,10],
  [9,14,4,13],
  [12,3,8,15],
  [11,5,7,6]
]
print(Solution().swimInWater(li))
