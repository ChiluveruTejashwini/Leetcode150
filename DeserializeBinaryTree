# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Codec:
    
    def serialize(self, root: Optional[TreeNode]) -> str:
        if not root:
            return "N"
        res = []
        queue = deque([root])
        while queue:
            node = queue.popleft()
            if not node:
                res.append("N")
            else:
                res.append(str(node.val))
                queue.append(node.left)
                queue.append(node.right)
        print(res)
        return ",".join(res)
        
    def deserialize(self, data: str) -> Optional[TreeNode]:
        if not data:
            return []
        vals=data.split(",")
        if vals[0]=="N":
            return None
        root=TreeNode(int(vals[0]))
        queue=deque([root])
        ind=1
        while queue:
            node=queue.popleft()
            if vals[ind]!="N":
                node.left=TreeNode(int(vals[ind]))
                queue.append(node.left)
            ind+=1
            if vals[ind]!="N":
                node.right=TreeNode(int(vals[ind]))
                queue.append(node.right)
            ind+=1
        return root

root = [1,2,3,null,null,4,5]
print(Codec().serialize(root))
            


        
