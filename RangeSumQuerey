class NumMatrix:

    def __init__(self, matrix: List[List[int]]):
        if not matrix or not matrix[0]:
            self.row_prefix = []
            return

        self.m = len(matrix)
        self.n = len(matrix[0])
        self.row_prefix = [[0] * (self.n + 1) for _ in range(self.m)]

        for i in range(self.m):
            for j in range(1, self.n + 1):
                self.row_prefix[i][j] = self.row_prefix[i][j-1] + matrix[i][j-1]

    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:
        total = 0
        for r in range(row1, row2 + 1):
            total += self.row_prefix[r][col2 + 1] - self.row_prefix[r][col1]
        return total
matrix = [
  [3, 0, 1, 4, 2],
  [5, 6, 3, 2, 1],
  [1, 2, 0, 1, 5],
  [4, 1, 0, 1, 7],
  [1, 0, 3, 0, 5]
]

obj = NumMatrix(matrix)

print(obj.sumRegion(2, 1, 4, 3))  # Expected 8
print(obj.sumRegion(1, 1, 2, 2))  # Expected 11
print(obj.sumRegion(1, 2, 2, 4)) 
