import heapq

class MedianFinder:

    def __init__(self):
        self.minheap=[]  
        self.maxheap=[]  

    def addNum(self, num: int) -> None:
        # Decide heap based on current max of smaller half
        if self.maxheap and num <= -self.maxheap[0]:
            heapq.heappush(self.maxheap, -num)
        else:
            heapq.heappush(self.minheap, num)

        # Balance heaps so size difference <= 1
        if len(self.maxheap) > len(self.minheap) + 1:
            val = -heapq.heappop(self.maxheap)
            heapq.heappush(self.minheap, val)
        elif len(self.minheap) > len(self.maxheap) + 1:
            val = heapq.heappop(self.minheap)
            heapq.heappush(self.maxheap, -val)

    def findMedian(self) -> float:
        if len(self.maxheap) == len(self.minheap):
            return (-self.maxheap[0] + self.minheap[0]) / 2.0
        elif len(self.maxheap) > len(self.minheap):
            return -self.maxheap[0]
        else:
            return self.minheap[0]
mf = MedianFinder()
mf.addNum(1)   # maxheap = [-1], minheap = []
mf.addNum(2)   # maxheap = [-1], minheap = [2]
mf.findMedian()  # (1+2)/2 = 1.5
mf.addNum(3)   # maxheap = [-2,-1], minheap = [3]
print(mf.findMedian())
