# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:
        minheap=[]
        if not root:
            return None
        queue=deque()
        queue.append(root)
        res=[]
        while queue:
            for i in range(len(queue)):
                cur=queue.popleft()
                heapq.heappush(res,-cur.val)
                if len(res)>k:
                    heapq.heappop(res)
                if cur.left:
                    queue.append(cur.left)
                if cur.right:
                    queue.append(cur.right)
        return -res[0]


root1 = TreeNode(1)
root1.left = TreeNode(2)
root1.right = TreeNode(3)
k=2
print(Solution().kthSmallest(root1,k))  # Expected 6 (2 + 1 + 3)


# Example 2: Tree = [-10,9,20,null,null,15,7]
#         -10
#        /   \
#       9    20
#           /  \
#          15   7
root2 = TreeNode(-10)
root2.left = TreeNode(9)
root2.right = TreeNode(20)
root2.right.left = TreeNode(15)
root2.right.right = TreeNode(7)
k=3
print(Solution().kthSmallest(root2,k))  # Expected 42 (15 + 20 + 7)


# Example 3: Single node [-3]
root3 = TreeNode(-3)
print(Solution().kthSmallest(root3,k))
